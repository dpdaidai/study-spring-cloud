spring.application.name=stream-hello

spring.rabbitmq.host=${rabbitMQ_host}
spring.rabbitmq.port=5672
spring.rabbitmq.username=${rabbitMQ_name}
spring.rabbitmq.password=${rabbitMQ_passwd}

#设置消息类型 , stream会自动转换json为对象
spring.cloud.stream.bindings.output_sender.content-type=application/json

# 为应用指定消费组 , 对于指定的topic , 同一组内只有一个实例会消费 , 防止重复消费
# spring.cloud.stream.bindings.<topic名>.group=<组名>
#spring.cloud.stream.bindings.my_input.group=service-A
#spring.cloud.stream.bindings.my_input.group=service-B

# 启用分区功能 -- 消费者
# https://zhuanlan.zhihu.com/p/107142676
# 有一些场景需要满足, 同一个特征的数据被同一个实例消费,
#  1  比如同一个id的传感器监测数据必须被同一个实例统计计算分析, 否则可能无法获取全部的数据。
#  2  又比如部分异步任务，首次请求启动task，二次请求取消task，此场景就必须保证两次请求至同一实例.
# 当我们在采用集群的方式部署同一个应用时，每一个实例都可以接受到同一个应用有多少个实例数量，以及当前自己的实例在集群中的索引。
# Stream通过 spring.cloud.stream.instanceCount 实例数量和 spring.cloud.stream.instanceIndex 当前的实例索引实现这一点。
# 如果实例总数instanceCount 是3，那么instanceIndex 索引从0开始到1、2 ，
# 这两个属性的正确配置对于解决分区行为非常的重要，可以用来确保消息在多个实例之间正确的分割。
spring.cloud.stream.bindings.my_input.consumer.partitioned=true
spring.cloud.stream.instanceCount=4
spring.cloud.stream.instanceIndex=0

# 启用分区功能 -- 配置生产者
# 指定分区键的表达式，payload表示获取消息后，进行hash取值计算出分区的值
#spring.cloud.stream.bindings.my_output.producer.partition-key-expression=payload
# 消息分区数量
#spring.cloud.stream.bindings.my_output.producer.partition-count=2
